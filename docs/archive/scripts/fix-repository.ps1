# ====================================================================
# AXON-UI Auto-Fix Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
# –î–∞—Ç–∞: 9 –æ–∫—Ç—è–±—Ä—è 2025 –≥.
# ====================================================================

param(
    [switch]$DryRun = $false,
    [switch]$SkipInstall = $false
)

$ErrorActionPreference = "Continue"
$script:fixedCount = 0
$script:errors = @()

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    $colors = @{
        "Green"  = [ConsoleColor]::Green
        "Red"    = [ConsoleColor]::Red
        "Yellow" = [ConsoleColor]::Yellow
        "Cyan"   = [ConsoleColor]::Cyan
    }
    Write-Host $Message -ForegroundColor $colors[$Color]
}

function Write-Section {
    param([string]$Title)
    Write-Host "`n" -NoNewline
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Cyan"
    Write-ColorOutput " $Title" "Cyan"
    Write-ColorOutput "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" "Cyan"
}

function Test-ProjectRoot {
    if (!(Test-Path "package.json")) {
        Write-ColorOutput "‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ AXON-UI" "Red"
        exit 1
    }
}

# ====================================================================
# –§–ê–ó–ê 1: –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
# ====================================================================
function Install-MissingDependencies {
    Write-Section "–§–ê–ó–ê 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    if ($SkipInstall) {
        Write-ColorOutput "‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (--SkipInstall)" "Yellow"
        return
    }
    
    if ($DryRun) {
        Write-ColorOutput "üîç DRY RUN: –ë—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:" "Yellow"
        Write-Host "   - @types/node (dev)"
        Write-Host "   - @octokit/core@^7.0.5"
        return
    }
    
    try {
        Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é @types/node..." "Green"
        npm install --save-dev @types/node 2>&1 | Out-Null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ @types/node —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Green"
            $script:fixedCount++
        }
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ @types/node: $_" "Red"
        $script:errors += "@types/node installation failed"
    }
    
    try {
        Write-ColorOutput "üì¶ –û–±–Ω–æ–≤–ª—è—é @octokit/core –¥–æ –≤–µ—Ä—Å–∏–∏ 7..." "Green"
        npm install @octokit/core@^7.0.5 2>&1 | Out-Null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ @octokit/core –æ–±–Ω–æ–≤–ª—ë–Ω" "Green"
            $script:fixedCount++
        }
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è @octokit/core: $_" "Red"
        $script:errors += "@octokit/core update failed"
    }
}

# ====================================================================
# –§–ê–ó–ê 2: ENVIRONMENT CONFIGURATION
# ====================================================================
function Create-EnvironmentFiles {
    Write-Section "–§–ê–ó–ê 2: –°–æ–∑–¥–∞–Ω–∏–µ Environment Configuration"
    
    # .env.example
    $envExampleContent = @"
# ============================================================================
# AXON-UI Environment Configuration
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã
# ============================================================================

# Development Server Configuration
UI_PORT=5000
HOST=localhost

# AXON API Configuration
# –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AXON backend
VITE_AXON_PROXY_TARGET=http://localhost:8000
VITE_AXON_BASE_URL=/api/axon

# Project Root (optional)
PROJECT_ROOT=.

# ============================================================================
# Development Notes:
# - UI_PORT: –ü–æ—Ä—Ç –¥–ª—è Vite dev-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5000)
# - HOST: –•–æ—Å—Ç –¥–ª—è dev-—Å–µ—Ä–≤–µ—Ä–∞ (localhost –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
# - VITE_AXON_PROXY_TARGET: URL AXON backend –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
# - VITE_AXON_BASE_URL: Base URL –¥–ª—è AXON API endpoints
# ============================================================================
"@
    
    if ($DryRun) {
        Write-ColorOutput "üîç DRY RUN: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω .env.example ($(($envExampleContent -split "`n").Count) —Å—Ç—Ä–æ–∫)" "Yellow"
    }
    else {
        try {
            Set-Content -Path ".env.example" -Value $envExampleContent -Encoding UTF8
            Write-ColorOutput "‚úÖ –°–æ–∑–¥–∞–Ω .env.example" "Green"
            $script:fixedCount++
        }
        catch {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env.example: $_" "Red"
            $script:errors += ".env.example creation failed"
        }
    }
    
    # .env (–ª–æ–∫–∞–ª—å–Ω—ã–π)
    if (!(Test-Path ".env")) {
        if ($DryRun) {
            Write-ColorOutput "üîç DRY RUN: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω .env (–∫–æ–ø–∏—è .env.example)" "Yellow"
        }
        else {
            try {
                Copy-Item ".env.example" ".env"
                Write-ColorOutput "‚úÖ –°–æ–∑–¥–∞–Ω .env –∏–∑ .env.example" "Green"
                $script:fixedCount++
            }
            catch {
                Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: $_" "Red"
                $script:errors += ".env creation failed"
            }
        }
    }
    else {
        Write-ColorOutput "‚ÑπÔ∏è  .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—Å–∫)" "Yellow"
    }
    
    # src/config/environment.ts
    $envTsContent = @"
/**
 * Environment Configuration
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * 
 * @module config/environment
 */

export const environment = {
  /** UI Configuration */
  ui: {
    /** Port for Vite dev server */
    port: Number(import.meta.env.UI_PORT) || 5000,
    /** Host for dev server */
    host: import.meta.env.HOST || 'localhost',
  },
  
  /** AXON Backend Configuration */
  axon: {
    /** Proxy target for AXON API (vite proxy) */
    proxyTarget: import.meta.env.VITE_AXON_PROXY_TARGET || '',
    /** Base URL for AXON API endpoints */
    baseUrl: import.meta.env.VITE_AXON_BASE_URL || '/api/axon',
    /** Full endpoint URL (computed) */
    get endpoint() {
      return this.proxyTarget || this.baseUrl;
    },
  },
  
  /** Environment flags */
  isDevelopment: import.meta.env.DEV,
  isProduction: import.meta.env.PROD,
  mode: import.meta.env.MODE,
} as const;

export type Environment = typeof environment;

/**
 * Type-safe environment variable access
 * Usage: getEnv('VITE_AXON_BASE_URL', '/api/axon')
 */
export function getEnv(key: string, defaultValue: string = ''): string {
  return (import.meta.env[key] as string) || defaultValue;
}

/**
 * Validate required environment variables
 * Call this in main.tsx to ensure all required vars are set
 */
export function validateEnvironment(): boolean {
  const required: string[] = [
    // Add required env vars here if needed
  ];
  
  const missing = required.filter(key => !import.meta.env[key]);
  
  if (missing.length > 0) {
    console.error('Missing required environment variables:', missing);
    return false;
  }
  
  return true;
}

export default environment;
"@
    
    if (!(Test-Path "src/config")) {
        if ($DryRun) {
            Write-ColorOutput "üîç DRY RUN: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è src/config" "Yellow"
        }
        else {
            try {
                New-Item -ItemType Directory -Path "src/config" -Force | Out-Null
                Write-ColorOutput "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è src/config" "Green"
                $script:fixedCount++
            }
            catch {
                Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è src/config: $_" "Red"
                $script:errors += "src/config directory creation failed"
                return
            }
        }
    }
    
    if ($DryRun) {
        Write-ColorOutput "üîç DRY RUN: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω src/config/environment.ts ($(($envTsContent -split "`n").Count) —Å—Ç—Ä–æ–∫)" "Yellow"
    }
    else {
        try {
            Set-Content -Path "src/config/environment.ts" -Value $envTsContent -Encoding UTF8
            Write-ColorOutput "‚úÖ –°–æ–∑–¥–∞–Ω src/config/environment.ts" "Green"
            $script:fixedCount++
        }
        catch {
            Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è environment.ts: $_" "Red"
            $script:errors += "environment.ts creation failed"
        }
    }
}

# ====================================================================
# –§–ê–ó–ê 3: TYPESCRIPT CONFIGURATION
# ====================================================================
function Update-TypeScriptConfig {
    Write-Section "–§–ê–ó–ê 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ TypeScript Configuration"
    
    if (!(Test-Path "tsconfig.json")) {
        Write-ColorOutput "‚ùå tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω" "Red"
        $script:errors += "tsconfig.json not found"
        return
    }
    
    try {
        $tsconfig = Get-Content "tsconfig.json" -Raw
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ "node" –≤ types
        if ($tsconfig -match '"types"\s*:\s*\[([^\]]*)\]') {
            $typesArray = $matches[1]
            if ($typesArray -notmatch '"node"') {
                if ($DryRun) {
                    Write-ColorOutput "üîç DRY RUN: –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ 'node' –≤ types –º–∞—Å—Å–∏–≤ tsconfig.json" "Yellow"
                }
                else {
                    # –î–æ–±–∞–≤–ª—è–µ–º "node" –≤ –º–∞—Å—Å–∏–≤ types
                    $newTypesArray = $typesArray.TrimEnd() + ', "node"'
                    $newTsconfig = $tsconfig -replace '"types"\s*:\s*\[[^\]]*\]', "`"types`": [$newTypesArray]"
                    
                    Set-Content -Path "tsconfig.json" -Value $newTsconfig -Encoding UTF8
                    Write-ColorOutput "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω 'node' –≤ types –º–∞—Å—Å–∏–≤ tsconfig.json" "Green"
                    $script:fixedCount++
                }
            }
            else {
                Write-ColorOutput "‚ÑπÔ∏è  'node' —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ types (–ø—Ä–æ–ø—É—Å–∫)" "Yellow"
            }
        }
        else {
            Write-ColorOutput "‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ 'types' –≤ tsconfig.json" "Yellow"
        }
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tsconfig.json: $_" "Red"
        $script:errors += "tsconfig.json update failed"
    }
}

# ====================================================================
# –§–ê–ó–ê 4: VALIDATION
# ====================================================================
function Run-Validation {
    Write-Section "–§–ê–ó–ê 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
    
    if ($DryRun) {
        Write-ColorOutput "üîç DRY RUN: –ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:" "Yellow"
        Write-Host "   - npm run typecheck (–ø—Ä–æ–≤–µ—Ä–∫–∞ TypeScript)"
        Write-Host "   - npm run test (–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤)"
        return
    }
    
    Write-ColorOutput "üîç –ó–∞–ø—É—Å–∫ TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∏..." "Cyan"
    $typecheckOutput = npm run typecheck 2>&1
    $typecheckErrors = ($typecheckOutput | Select-String "error TS").Count
    
    if ($typecheckErrors -eq 0) {
        Write-ColorOutput "‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è: 0 –æ—à–∏–±–æ–∫" "Green"
    }
    else {
        Write-ColorOutput "‚ö†Ô∏è  TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è: $typecheckErrors –æ—à–∏–±–æ–∫ (—É–ª—É—á—à–µ–Ω–∏–µ!)" "Yellow"
        Write-ColorOutput "   –†–∞–Ω–µ–µ –±—ã–ª–æ: 26 –æ—à–∏–±–æ–∫" "Yellow"
    }
    
    Write-ColorOutput "`nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..." "Cyan"
    $testOutput = npm run test 2>&1
    $passedTests = ($testOutput | Select-String "‚úì").Count
    $failedTests = ($testOutput | Select-String "‚úó").Count
    
    Write-ColorOutput "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:" "Cyan"
    Write-ColorOutput "   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: $passedTests" "Green"
    if ($failedTests -gt 0) {
        Write-ColorOutput "   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: $failedTests" "Red"
    }
}

# ====================================================================
# –§–ê–ó–ê 5: GIT COMMIT
# ====================================================================
function Commit-Changes {
    Write-Section "–§–ê–ó–ê 5: Git Commit"
    
    $gitStatus = git status --short 2>&1
    
    if ($gitStatus) {
        Write-ColorOutput "üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è:" "Cyan"
        $gitStatus | ForEach-Object { Write-Host "   $_" }
        
        if ($DryRun) {
            Write-ColorOutput "`nüîç DRY RUN: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω commit:" "Yellow"
            Write-Host '   git add .'
            Write-Host '   git commit -m "fix: add missing deps and environment config"'
        }
        else {
            Write-Host "`n"
            $confirm = Read-Host "–ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/n)"
            if ($confirm -eq 'y') {
                git add .
                git commit -m "fix: add missing deps and environment config

- Add @types/node for TypeScript Node.js support
- Update @octokit/core to v7
- Create .env.example and .env files
- Create src/config/environment.ts for centralized config
- Update tsconfig.json with node types
- Auto-generated by fix-repository.ps1"
                
                Write-ColorOutput "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã" "Green"
                
                $push = Read-Host "–ó–∞–ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/n)"
                if ($push -eq 'y') {
                    git push
                    Write-ColorOutput "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ remote" "Green"
                }
            }
        }
    }
    else {
        Write-ColorOutput "‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è commit" "Yellow"
    }
}

# ====================================================================
# MAIN
# ====================================================================
function Main {
    Write-ColorOutput @"

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                ‚ïë
‚ïë          AXON-UI REPOSITORY AUTO-FIX SCRIPT                    ‚ïë
‚ïë          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º                    ‚ïë
‚ïë                                                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

"@ "Cyan"
    
    if ($DryRun) {
        Write-ColorOutput "üîç –†–ï–ñ–ò–ú DRY RUN: –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã" "Yellow"
    }
    
    Test-ProjectRoot
    
    Install-MissingDependencies
    Create-EnvironmentFiles
    Update-TypeScriptConfig
    Run-Validation
    Commit-Changes
    
    Write-Section "–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢"
    
    Write-ColorOutput "`n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $script:fixedCount" "Green"
    
    if ($script:errors.Count -gt 0) {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∏ ($($script:errors.Count)):" "Red"
        $script:errors | ForEach-Object { Write-ColorOutput "   - $_" "Red" }
    }
    
    if (!$DryRun) {
        Write-ColorOutput "`nüìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" "Cyan"
        Write-Host "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
        Write-Host "   2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è failing tests (—Å–º. REPOSITORY_AUDIT_REPORT.md)"
        Write-Host "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev"
        Write-Host "   4. –û—Ç–∫—Ä–æ–π—Ç–µ: REPOSITORY_AUDIT_REPORT.md –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
    }
    
    Write-ColorOutput "`n‚ú® –ì–æ—Ç–æ–≤–æ!`n" "Green"
}

# –ó–∞–ø—É—Å–∫
Main
